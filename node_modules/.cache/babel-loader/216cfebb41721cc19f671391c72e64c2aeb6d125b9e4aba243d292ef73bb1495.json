{"ast":null,"code":"import React,{useState,useEffect}from'react';import{initializeApp}from'firebase/app';import{getAuth,signInAnonymously,signInWithCustomToken,onAuthStateChanged}from'firebase/auth';import{getFirestore,doc,getDoc,setDoc,collection,query,where,getDocs,addDoc}from'firebase/firestore';import HomePage from'./components/HomePage';import DashboardLayout from'./components/DashboardLayout';import AdminDashboardLayout from'./components/AdminDashboardLayout';import{COLORS}from'./constants';// Assuming COLORS is defined here\nimport GlassCard from'./components/common/GlassCard';// Make sure this path is correct\n// Firebase global variables (provided by Canvas environment)\nimport{jsx as _jsx}from\"react/jsx-runtime\";const firebaseConfig=typeof __firebase_config!=='undefined'?JSON.parse(__firebase_config):{};const initialAuthToken=typeof __initial_auth_token!=='undefined'?__initial_auth_token:null;const appId=typeof __app_id!=='undefined'?__app_id:'default-app-id';// Initialize Firebase\nconst app=initializeApp(firebaseConfig);const db=getFirestore(app);const auth=getAuth(app);function App(){const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);const[showLogin,setShowLogin]=useState(false);// State to control login form visibility\nconst[loginDiscordId,setLoginDiscordId]=useState('');const[loginPassword,setLoginPassword]=useState('');const[showRegister,setShowRegister]=useState(false);// State to control registration form visibility\nconst[registerName,setRegisterName]=useState('');const[registerDiscordId,setRegisterDiscordId]=useState('');const[registerRegion,setRegisterRegion]=useState('');const[registerPassword,setRegisterPassword]=useState('');const[registerInitialDeposit,setRegisterInitialDeposit]=useState('');useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,async user=>{if(user){const userDocRef=doc(db,`artifacts/${appId}/users`,user.uid);const docSnap=await getDoc(userDocRef);if(docSnap.exists()){setUserProfile(docSnap.data());}else{// If user exists in auth but not in Firestore, might be a new anonymous user\n// or a deleted user. For now, we'll treat them as needing to register/login.\nsetUserProfile(null);setShowLogin(true);// Show login if no profile found\n}}else{setUserProfile(null);setShowLogin(true);// Show login if no user is authenticated\n}setLoading(false);});const signIn=async()=>{try{if(initialAuthToken){await signInWithCustomToken(auth,initialAuthToken);}else{await signInAnonymously(auth);}}catch(error){console.error(\"Error signing in:\",error);alert(\"Failed to sign in. Please try again.\");}};signIn();// Attempt to sign in on app load\nreturn()=>unsubscribe();},[]);// Empty dependency array means this runs once on mount\nconst handleLogin=async e=>{e.preventDefault();setLoading(true);try{// In a real app, you'd verify password against a stored hash.\n// For this simulation, we'll just find the user by Discord ID and check if password matches (conceptually).\nconst usersRef=collection(db,`artifacts/${appId}/users`);const q=query(usersRef,where(\"discordId\",\"==\",loginDiscordId));const querySnapshot=await getDocs(q);if(!querySnapshot.empty){const userData=querySnapshot.docs[0].data();// Conceptual password check (replace with actual bcrypt/hashing in production)\nif(userData.password===loginPassword){// DANGER: Never store plain passwords in production\nsetUserProfile(userData);setShowLogin(false);alert('Login successful!');}else{alert('Invalid Discord ID or Password.');}}else{alert('User not found. Please register or check your Discord ID.');}}catch(error){console.error(\"Login error:\",error);alert(`Login failed: ${error.message}`);}finally{setLoading(false);}};const handleRegister=async e=>{e.preventDefault();setLoading(true);if(parseFloat(registerInitialDeposit)<100){alert('Initial deposit must be at least 100 RUB.');setLoading(false);return;}try{// Check if Discord ID or Bank ID already exists\nconst usersRef=collection(db,`artifacts/${appId}/users`);const qDiscord=query(usersRef,where(\"discordId\",\"==\",registerDiscordId));const discordSnapshot=await getDocs(qDiscord);if(!discordSnapshot.empty){alert('A user with this Discord ID already exists.');setLoading(false);return;}// Generate a simple Bank ID (e.g., SBR-BANK-XXXX)\nconst bankId=`SBR-BANK-${Math.random().toString(36).substr(2,4).toUpperCase()}`;const kycCode=`KYC-${Math.random().toString(36).substr(2,6).toUpperCase()}`;const newUserId=auth.currentUser.uid;// Use Firebase Auth UID as the document ID\nconst newProfile={id:newUserId,// Store the Firebase Auth UID\nname:registerName,discordId:registerDiscordId,bankId:bankId,kycCode:kycCode,region:registerRegion,password:registerPassword,// DANGER: Never store plain passwords in production\nbalance:0,// Initial balance before deposit is processed\naccounts:{},// Accounts will be populated upon approval\ntransactions:[],dateJoined:new Date().toLocaleDateString('en-US'),creditScore:500,// Default credit score\nhasCreditCard:false,isFrozen:false,// Not frozen by default\nspecialRole:'User',// Default role\nisBusinessOwner:false,businessRegistrationId:null,// New field for business linking\nloanHistory:[],isLoanBlacklisted:false,isCreditFrozen:false,// For credit overuse penalties\ncreditFreezeEndDate:null,isCreditCardSuspended:false,creditCardSuspensionEndDate:null,newLoanBlockedEndDate:null,isSuspicious:false,triggerInternalAffairs:false};await setDoc(doc(db,`artifacts/${appId}/users`,newUserId),newProfile);// Submit an account creation request for admin approval\nconst accountRequestData={userId:newUserId,userName:registerName,discordId:registerDiscordId,accountType:'Personal',// Default to personal account on registration\ninitialDeposit:parseFloat(registerInitialDeposit),status:'Pending',timestamp:new Date().toISOString(),discordMessageLink:`https://discord.com/channels/@me/${registerDiscordId}`// Example link for proof\n};await addDoc(collection(db,`artifacts/${appId}/public/data/accountRequests`),accountRequestData);setUserProfile(newProfile);// Set profile immediately, but account is pending approval\nsetShowRegister(false);setShowLogin(false);alert('Registration successful! Your account is pending admin approval for initial deposit and personal account creation.');}catch(error){console.error(\"Registration error:\",error);alert(`Registration failed: ${error.message}`);}finally{setLoading(false);}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center min-h-screen\",style:{backgroundColor:COLORS.background,color:COLORS.typography},children:/*#__PURE__*/_jsx(\"p\",{className:\"text-xl\",children:\"Loading application...\"})});}// Render Admin Dashboard if user has 'Admin' or 'Super Admin' role\nif(userProfile&&(userProfile.specialRole==='Admin'||userProfile.specialRole==='Super Admin')){return/*#__PURE__*/_jsx(AdminDashboardLayout,{setUserProfile:setUserProfile,db:db,appId:appId,auth:auth,userProfile:userProfile});}// Render User Dashboard if user is logged in and not an admin\nif(userProfile){return/*#__PURE__*/_jsx(DashboardLayout,{userProfile:userProfile,setUserProfile:setUserProfile,db:db,appId:appId,auth:auth});}// Render Home Page with Login/Register forms if not logged in\nreturn/*#__PURE__*/_jsx(HomePage,{showLogin:showLogin,setShowLogin:setShowLogin,handleLogin:handleLogin,loginDiscordId:loginDiscordId,setLoginDiscordId:setLoginDiscordId,loginPassword:loginPassword,setLoginPassword:setLoginPassword,showRegister:showRegister,setShowRegister:setShowRegister,handleRegister:handleRegister,registerName:registerName,setRegisterName:setRegisterName,registerDiscordId:registerDiscordId,setRegisterDiscordId:setRegisterDiscordId,registerRegion:registerRegion,setRegisterRegion:setRegisterRegion,registerPassword:registerPassword,setRegisterPassword:setRegisterPassword,registerInitialDeposit:registerInitialDeposit,setRegisterInitialDeposit:setRegisterInitialDeposit});}export default App;","map":{"version":3,"names":["React","useState","useEffect","initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","query","where","getDocs","addDoc","HomePage","DashboardLayout","AdminDashboardLayout","COLORS","GlassCard","jsx","_jsx","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","appId","__app_id","app","db","auth","App","userProfile","setUserProfile","loading","setLoading","showLogin","setShowLogin","loginDiscordId","setLoginDiscordId","loginPassword","setLoginPassword","showRegister","setShowRegister","registerName","setRegisterName","registerDiscordId","setRegisterDiscordId","registerRegion","setRegisterRegion","registerPassword","setRegisterPassword","registerInitialDeposit","setRegisterInitialDeposit","unsubscribe","user","userDocRef","uid","docSnap","exists","data","signIn","error","console","alert","handleLogin","e","preventDefault","usersRef","q","querySnapshot","empty","userData","docs","password","message","handleRegister","parseFloat","qDiscord","discordSnapshot","bankId","Math","random","toString","substr","toUpperCase","kycCode","newUserId","currentUser","newProfile","id","name","discordId","region","balance","accounts","transactions","dateJoined","Date","toLocaleDateString","creditScore","hasCreditCard","isFrozen","specialRole","isBusinessOwner","businessRegistrationId","loanHistory","isLoanBlacklisted","isCreditFrozen","creditFreezeEndDate","isCreditCardSuspended","creditCardSuspensionEndDate","newLoanBlockedEndDate","isSuspicious","triggerInternalAffairs","accountRequestData","userId","userName","accountType","initialDeposit","status","timestamp","toISOString","discordMessageLink","className","style","backgroundColor","background","color","typography","children"],"sources":["C:/Users/trent/OneDrive/Desktop/SberBank Website/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, doc, getDoc, setDoc, collection, query, where, getDocs, addDoc } from 'firebase/firestore';\r\nimport HomePage from './components/HomePage';\r\nimport DashboardLayout from './components/DashboardLayout';\r\nimport AdminDashboardLayout from './components/AdminDashboardLayout';\r\nimport { COLORS } from './constants'; // Assuming COLORS is defined here\r\nimport GlassCard from './components/common/GlassCard'; // Make sure this path is correct\r\n\r\n// Firebase global variables (provided by Canvas environment)\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\n\r\nfunction App() {\r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [showLogin, setShowLogin] = useState(false); // State to control login form visibility\r\n    const [loginDiscordId, setLoginDiscordId] = useState('');\r\n    const [loginPassword, setLoginPassword] = useState('');\r\n    const [showRegister, setShowRegister] = useState(false); // State to control registration form visibility\r\n    const [registerName, setRegisterName] = useState('');\r\n    const [registerDiscordId, setRegisterDiscordId] = useState('');\r\n    const [registerRegion, setRegisterRegion] = useState('');\r\n    const [registerPassword, setRegisterPassword] = useState('');\r\n    const [registerInitialDeposit, setRegisterInitialDeposit] = useState('');\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n            if (user) {\r\n                const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);\r\n                const docSnap = await getDoc(userDocRef);\r\n                if (docSnap.exists()) {\r\n                    setUserProfile(docSnap.data());\r\n                } else {\r\n                    // If user exists in auth but not in Firestore, might be a new anonymous user\r\n                    // or a deleted user. For now, we'll treat them as needing to register/login.\r\n                    setUserProfile(null);\r\n                    setShowLogin(true); // Show login if no profile found\r\n                }\r\n            } else {\r\n                setUserProfile(null);\r\n                setShowLogin(true); // Show login if no user is authenticated\r\n            }\r\n            setLoading(false);\r\n        });\r\n\r\n        const signIn = async () => {\r\n            try {\r\n                if (initialAuthToken) {\r\n                    await signInWithCustomToken(auth, initialAuthToken);\r\n                } else {\r\n                    await signInAnonymously(auth);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error signing in:\", error);\r\n                alert(\"Failed to sign in. Please try again.\");\r\n            }\r\n        };\r\n\r\n        signIn(); // Attempt to sign in on app load\r\n\r\n        return () => unsubscribe();\r\n    }, []); // Empty dependency array means this runs once on mount\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try {\r\n            // In a real app, you'd verify password against a stored hash.\r\n            // For this simulation, we'll just find the user by Discord ID and check if password matches (conceptually).\r\n            const usersRef = collection(db, `artifacts/${appId}/users`);\r\n            const q = query(usersRef, where(\"discordId\", \"==\", loginDiscordId));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            if (!querySnapshot.empty) {\r\n                const userData = querySnapshot.docs[0].data();\r\n                // Conceptual password check (replace with actual bcrypt/hashing in production)\r\n                if (userData.password === loginPassword) { // DANGER: Never store plain passwords in production\r\n                    setUserProfile(userData);\r\n                    setShowLogin(false);\r\n                    alert('Login successful!');\r\n                } else {\r\n                    alert('Invalid Discord ID or Password.');\r\n                }\r\n            } else {\r\n                alert('User not found. Please register or check your Discord ID.');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            alert(`Login failed: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        if (parseFloat(registerInitialDeposit) < 100) {\r\n            alert('Initial deposit must be at least 100 RUB.');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Check if Discord ID or Bank ID already exists\r\n            const usersRef = collection(db, `artifacts/${appId}/users`);\r\n            const qDiscord = query(usersRef, where(\"discordId\", \"==\", registerDiscordId));\r\n            const discordSnapshot = await getDocs(qDiscord);\r\n            if (!discordSnapshot.empty) {\r\n                alert('A user with this Discord ID already exists.');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Generate a simple Bank ID (e.g., SBR-BANK-XXXX)\r\n            const bankId = `SBR-BANK-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\r\n            const kycCode = `KYC-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\r\n\r\n            const newUserId = auth.currentUser.uid; // Use Firebase Auth UID as the document ID\r\n\r\n            const newProfile = {\r\n                id: newUserId, // Store the Firebase Auth UID\r\n                name: registerName,\r\n                discordId: registerDiscordId,\r\n                bankId: bankId,\r\n                kycCode: kycCode,\r\n                region: registerRegion,\r\n                password: registerPassword, // DANGER: Never store plain passwords in production\r\n                balance: 0, // Initial balance before deposit is processed\r\n                accounts: {}, // Accounts will be populated upon approval\r\n                transactions: [],\r\n                dateJoined: new Date().toLocaleDateString('en-US'),\r\n                creditScore: 500, // Default credit score\r\n                hasCreditCard: false,\r\n                isFrozen: false, // Not frozen by default\r\n                specialRole: 'User', // Default role\r\n                isBusinessOwner: false,\r\n                businessRegistrationId: null, // New field for business linking\r\n                loanHistory: [],\r\n                isLoanBlacklisted: false,\r\n                isCreditFrozen: false, // For credit overuse penalties\r\n                creditFreezeEndDate: null,\r\n                isCreditCardSuspended: false,\r\n                creditCardSuspensionEndDate: null,\r\n                newLoanBlockedEndDate: null,\r\n                isSuspicious: false,\r\n                triggerInternalAffairs: false\r\n            };\r\n\r\n            await setDoc(doc(db, `artifacts/${appId}/users`, newUserId), newProfile);\r\n\r\n            // Submit an account creation request for admin approval\r\n            const accountRequestData = {\r\n                userId: newUserId,\r\n                userName: registerName,\r\n                discordId: registerDiscordId,\r\n                accountType: 'Personal', // Default to personal account on registration\r\n                initialDeposit: parseFloat(registerInitialDeposit),\r\n                status: 'Pending',\r\n                timestamp: new Date().toISOString(),\r\n                discordMessageLink: `https://discord.com/channels/@me/${registerDiscordId}` // Example link for proof\r\n            };\r\n            await addDoc(collection(db, `artifacts/${appId}/public/data/accountRequests`), accountRequestData);\r\n\r\n\r\n            setUserProfile(newProfile); // Set profile immediately, but account is pending approval\r\n            setShowRegister(false);\r\n            setShowLogin(false);\r\n            alert('Registration successful! Your account is pending admin approval for initial deposit and personal account creation.');\r\n\r\n        } catch (error) {\r\n            console.error(\"Registration error:\", error);\r\n            alert(`Registration failed: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"flex items-center justify-center min-h-screen\" style={{ backgroundColor: COLORS.background, color: COLORS.typography }}>\r\n                <p className=\"text-xl\">Loading application...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Render Admin Dashboard if user has 'Admin' or 'Super Admin' role\r\n    if (userProfile && (userProfile.specialRole === 'Admin' || userProfile.specialRole === 'Super Admin')) {\r\n        return <AdminDashboardLayout setUserProfile={setUserProfile} db={db} appId={appId} auth={auth} userProfile={userProfile} />;\r\n    }\r\n\r\n    // Render User Dashboard if user is logged in and not an admin\r\n    if (userProfile) {\r\n        return <DashboardLayout userProfile={userProfile} setUserProfile={setUserProfile} db={db} appId={appId} auth={auth} />;\r\n    }\r\n\r\n    // Render Home Page with Login/Register forms if not logged in\r\n    return (\r\n        <HomePage\r\n            showLogin={showLogin}\r\n            setShowLogin={setShowLogin}\r\n            handleLogin={handleLogin}\r\n            loginDiscordId={loginDiscordId}\r\n            setLoginDiscordId={setLoginDiscordId}\r\n            loginPassword={loginPassword}\r\n            setLoginPassword={setLoginPassword}\r\n            showRegister={showRegister}\r\n            setShowRegister={setShowRegister}\r\n            handleRegister={handleRegister}\r\n            registerName={registerName}\r\n            setRegisterName={setRegisterName}\r\n            registerDiscordId={registerDiscordId}\r\n            setRegisterDiscordId={setRegisterDiscordId}\r\n            registerRegion={registerRegion}\r\n            setRegisterRegion={setRegisterRegion}\r\n            registerPassword={registerPassword}\r\n            setRegisterPassword={setRegisterPassword}\r\n            registerInitialDeposit={registerInitialDeposit}\r\n            setRegisterInitialDeposit={setRegisterInitialDeposit}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
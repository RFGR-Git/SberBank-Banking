{"ast":null,"code":"import React,{useState,useEffect}from'react';import{doc,updateDoc,collection,query,where,getDocs,getDoc,deleteDoc,onSnapshot}from'firebase/firestore';import{signOut}from'firebase/auth';// Import signOut\nimport{COLORS}from'../constants';import AdminSidebar from'./admin/AdminSidebar';import AdminDashboardOverview from'./admin/AdminDashboardOverview';import AdminAccountQueues from'./admin/AdminAccountQueues';import AdminCreditLoans from'./admin/AdminCreditLoans';import AdminUserManagement from'./admin/AdminUserManagement';import AdminReportsAudits from'./admin/AdminReportsAudits';import AdminGovernmentTools from'./admin/AdminGovernmentTools';import AdminSecurityTools from'./admin/AdminSecurityTools';import AdminAdvancedTools from'./admin/AdminAdvancedTools';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminDashboardLayout=_ref=>{let{setUserProfile,db,appId,auth,userProfile}=_ref;const[activeSection,setActiveSection]=useState('dashboard-overview');const[accountRequests,setAccountRequests]=useState([]);const[creditCardRequests,setCreditCardRequests]=useState([]);const[depositRequests,setDepositRequests]=useState([]);const[withdrawalRequests,setWithdrawalRequests]=useState([]);const[loanRequests,setLoanRequests]=useState([]);const[isSystemLocked,setIsSystemLocked]=useState(false);// Global system lock state\n// Function to find user by Discord ID or Bank ID\nconst findUserByDiscordOrBankId=async id=>{const usersRef=collection(db,`artifacts/${appId}/users`);let q;if(/^\\d+$/.test(id)){// Check if ID is purely numeric (likely Discord ID)\nq=query(usersRef,where(\"discordId\",\"==\",id));const discordSnapshot=await getDocs(q);if(!discordSnapshot.empty){return{id:discordSnapshot.docs[0].id,data:discordSnapshot.docs[0].data()};}// If not found by Discord ID, try Bank ID (which can also be numeric)\nq=query(usersRef,where(\"bankId\",\"==\",id));const bankIdSnapshot=await getDocs(q);if(!bankIdSnapshot.empty){return{id:bankIdSnapshot.docs[0].id,data:bankIdSnapshot.docs[0].data()};}}else{// Assume it's a Bank ID (alphanumeric)\nq=query(usersRef,where(\"bankId\",\"==\",id));const bankIdSnapshot=await getDocs(q);if(!bankIdSnapshot.empty){return{id:bankIdSnapshot.docs[0].id,data:bankIdSnapshot.docs[0].data()};}}return null;};// Fetch requests and global lock status on mount\nuseEffect(()=>{if(!db||!auth.currentUser){console.log(\"AdminDashboardLayout: DB or auth.currentUser not ready for fetching requests.\");return;}console.log(\"AdminDashboardLayout: Current authenticated user UID:\",auth.currentUser.uid);// Listen to global system lock status\nconst adminSettingsRef=doc(db,`artifacts/${appId}/public/data/adminSettings`,'global');const unsubscribeGlobalLock=onSnapshot(adminSettingsRef,docSnap=>{if(docSnap.exists()){setIsSystemLocked(docSnap.data().isSystemLocked||false);}else{// If the document doesn't exist, create it with default false\nupdateDoc(adminSettingsRef,{isSystemLocked:false},{merge:true});setIsSystemLocked(false);}},error=>console.error(\"Error listening to global lock status:\",error));const unsubscribeAccountRequests=onSnapshot(query(collection(db,`artifacts/${appId}/public/data/accountRequests`),where(\"status\",\"==\",\"Pending\")),snapshot=>{setAccountRequests(snapshot.docs.map(doc=>({id:doc.id,...doc.data()})));},error=>console.error(\"AdminDashboardLayout: Error listening to account requests:\",error));const unsubscribeCreditCardRequests=onSnapshot(query(collection(db,`artifacts/${appId}/public/data/creditCardRequests`),where(\"status\",\"==\",\"Pending\")),snapshot=>{setCreditCardRequests(snapshot.docs.map(doc=>({id:doc.id,...doc.data()})));},error=>console.error(\"AdminDashboardLayout: Error listening to credit card requests:\",error));const unsubscribeDepositRequests=onSnapshot(query(collection(db,`artifacts/${appId}/public/data/depositRequests`),where(\"status\",\"==\",\"Pending\")),snapshot=>{setDepositRequests(snapshot.docs.map(doc=>({id:doc.id,...doc.data()})));},error=>console.error(\"AdminDashboardLayout: Error listening to deposit requests:\",error));const unsubscribeWithdrawalRequests=onSnapshot(query(collection(db,`artifacts/${appId}/public/data/withdrawalRequests`),where(\"status\",\"==\",\"Pending\")),snapshot=>{setWithdrawalRequests(snapshot.docs.map(doc=>({id:doc.id,...doc.data()})));},error=>console.error(\"AdminDashboardLayout: Error listening to withdrawal requests:\",error));const unsubscribeLoanRequests=onSnapshot(query(collection(db,`artifacts/${appId}/public/data/loanRequests`),where(\"status\",\"==\",\"Pending\")),snapshot=>{setLoanRequests(snapshot.docs.map(doc=>({id:doc.id,...doc.data()})));},error=>console.error(\"AdminDashboardLayout: Error listening to loan requests:\",error));return()=>{unsubscribeAccountRequests();unsubscribeCreditCardRequests();unsubscribeDepositRequests();unsubscribeWithdrawalRequests();unsubscribeLoanRequests();unsubscribeGlobalLock();};},[db,appId,auth.currentUser]);// --- Request Approval/Denial Handlers (Moved from AdminDashboardLayout, now passed as props) ---\nconst handleApproveDenyAccountRequest=async(requestId,status)=>{try{const requestDocRef=doc(db,`artifacts/${appId}/public/data/accountRequests`,requestId);const requestSnap=await getDoc(requestDocRef);if(!requestSnap.exists()){alert('Account request not found.');return;}const requestData=requestSnap.data();const userDocRef=doc(db,`artifacts/${appId}/users`,requestData.userId);const currentUserSnap=await getDoc(userDocRef);if(!currentUserSnap.exists()){alert('User for this request not found. Request cannot be processed.');await deleteDoc(requestDocRef);return;}const currentUserData=currentUserSnap.data();if(status==='Approved'){const depositAmount=requestData.initialDeposit;const newBalance=(currentUserData.balance||0)+depositAmount;const newAccounts={...currentUserData.accounts,[requestData.accountType]:(currentUserData.accounts[requestData.accountType]||0)+depositAmount};const newTransactions=[...(currentUserData.transactions||[]),{date:new Date().toLocaleDateString('en-US'),description:`${requestData.accountType} Account Opened (Admin Approved)`,amount:depositAmount,status:'Complete',discordLink:requestData.discordMessageLink}];const updateData={balance:newBalance,accounts:newAccounts,transactions:newTransactions};if(requestData.accountType==='Personal'&&!currentUserData.debitCard){updateData.debitCard={number:Array(4).fill(0).map(()=>Math.floor(1000+Math.random()*9000)).join(' '),expiry:`${String(new Date().getMonth()+1).padStart(2,'0')}/${String(new Date().getFullYear()+7).slice(-2)}`,cvv:String(Math.floor(100+Math.random()*900)),pin:String(Math.floor(1000+Math.random()*9000))};}await updateDoc(userDocRef,updateData);alert(`${requestData.accountType} account for ${requestData.userName} approved. Balance updated.`);}else{alert(`${requestData.accountType} account for ${requestData.userName} denied.`);}await updateDoc(requestDocRef,{status:status});}catch(error){console.error(`Error ${status.toLowerCase()} account request:`,error);alert(`Failed to ${status.toLowerCase()} account request: ${error.message}`);}};const handleApproveDenyCreditCardRequest=async(requestId,status)=>{try{const requestDocRef=doc(db,`artifacts/${appId}/public/data/creditCardRequests`,requestId);const requestSnap=await getDoc(requestDocRef);if(!requestSnap.exists()){alert('Credit Card request not found.');return;}const requestData=requestSnap.data();const userDocRef=doc(db,`artifacts/${appId}/users`,requestData.userId);const currentUserSnap=await getDoc(userDocRef);if(!currentUserSnap.exists()){alert('User for this request not found. Request cannot be processed.');await deleteDoc(requestDocRef);return;}const currentUserData=currentUserSnap.data();let approvalMessage='';let creditLimit=0;if(status==='Approved'){if(requestData.creditScore>=750){creditLimit=20000;approvalMessage=`Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit (Premium).`;}else if(requestData.creditScore>=600){creditLimit=15000;approvalMessage=`Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit.`;}else if(requestData.creditScore>=500){creditLimit=5000;approvalMessage=`Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit (Manual Review).`;}else{status='Denied';approvalMessage=`Credit Card denied for ${requestData.userName} (Score too low: ${requestData.creditScore}).`;}if(status==='Approved'){await updateDoc(userDocRef,{hasCreditCard:true,'accounts.CreditCard':creditLimit,transactions:[...(currentUserData.transactions||[]),{date:new Date().toLocaleDateString('en-US'),description:`Credit Card Approved (Limit: ₽${creditLimit.toLocaleString()})`,amount:0,status:'Complete',discordLink:requestData.discordLink}]});}}else{approvalMessage=`Credit Card denied for ${requestData.userName}.`;}await updateDoc(requestDocRef,{status:status,creditLimit:creditLimit});alert(approvalMessage);}catch(error){console.error(`Error ${status.toLowerCase()} credit card request:`,error);alert(`Failed to ${status.toLowerCase()} credit card request: ${error.message}`);}};const handleApproveDenyDepositRequest=async(requestId,status)=>{try{const requestDocRef=doc(db,`artifacts/${appId}/public/data/depositRequests`,requestId);const requestSnap=await getDoc(requestDocRef);if(!requestSnap.exists()){alert('Deposit request not found.');return;}const requestData=requestSnap.data();const userDocRef=doc(db,`artifacts/${appId}/users`,requestData.userId);const currentUserSnap=await getDoc(userDocRef);if(!currentUserSnap.exists()){alert('User for this request not found. Request cannot be processed.');await deleteDoc(requestDocRef);return;}const currentUserData=currentUserSnap.data();if(status==='Approved'){var _currentUserData$acco;const depositAmount=requestData.amount;await updateDoc(userDocRef,{balance:(currentUserData.balance||0)+depositAmount,'accounts.Personal':(((_currentUserData$acco=currentUserData.accounts)===null||_currentUserData$acco===void 0?void 0:_currentUserData$acco.Personal)||0)+depositAmount,transactions:[...(currentUserData.transactions||[]),{date:new Date().toLocaleDateString('en-US'),description:`Deposit Approved (Proof: ${requestData.discordLink})`,amount:depositAmount,status:'Complete',discordLink:requestData.discordLink}]});alert(`Deposit of ${depositAmount.toFixed(2)} RUB for ${requestData.userName} approved.`);}else{alert(`Deposit request for ${requestData.userName} denied.`);}await updateDoc(requestDocRef,{status:status});}catch(error){console.error(`Error ${status.toLowerCase()} deposit request:`,error);alert(`Failed to ${status.toLowerCase()} deposit request: ${error.message}`);}};const handleApproveDenyWithdrawalRequest=async(requestId,status)=>{try{const requestDocRef=doc(db,`artifacts/${appId}/public/data/withdrawalRequests`,requestId);const requestSnap=await getDoc(requestDocRef);if(!requestSnap.exists()){alert('Withdrawal request not found.');return;}const requestData=requestSnap.data();const userDocRef=doc(db,`artifacts/${appId}/users`,requestData.userId);const currentUserSnap=await getDoc(userDocRef);if(!currentUserSnap.exists()){alert('User for this request not found. Request cannot be processed.');await deleteDoc(requestDocRef);return;}const currentUserData=currentUserSnap.data();if(status==='Approved'){const withdrawalAmount=requestData.amount;const sourceAccount=requestData.sourceAccount;if((currentUserData.accounts[sourceAccount]||0)<withdrawalAmount){alert(`User ${requestData.userName} has insufficient funds in ${sourceAccount} for this withdrawal. Denying.`);status='Denied';}else{await updateDoc(userDocRef,{[`accounts.${sourceAccount}`]:(currentUserData.accounts[sourceAccount]||0)-withdrawalAmount,balance:(currentUserData.balance||0)-withdrawalAmount,transactions:[...(currentUserData.transactions||[]),{date:new Date().toLocaleDateString('en-US'),description:`Withdrawal Approved from ${sourceAccount}`,amount:-withdrawalAmount,status:'Complete',discordLink:requestData.discordLink// Add discordLink if available\n}]});alert(`Withdrawal of ${withdrawalAmount.toFixed(2)} RUB from ${sourceAccount} for ${requestData.userName} approved.`);}}else{alert(`Withdrawal request for ${requestData.userName} denied.`);}await updateDoc(requestDocRef,{status:status});}catch(error){console.error(`Error ${status.toLowerCase()} withdrawal request:`,error);alert(`Failed to ${status.toLowerCase()} withdrawal request: ${error.message}`);}};const handleApproveDenyLoanRequest=async(requestId,status)=>{try{const requestDocRef=doc(db,`artifacts/${appId}/public/data/loanRequests`,requestId);const requestSnap=await getDoc(requestDocRef);if(!requestSnap.exists()){alert('Loan request not found.');return;}const requestData=requestSnap.data();const userDocRef=doc(db,`artifacts/${appId}/users`,requestData.userId);const currentUserSnap=await getDoc(userDocRef);if(!currentUserSnap.exists()){alert('User for this request not found. Request cannot be processed.');await deleteDoc(requestDocRef);return;}const currentUserData=currentUserSnap.data();if(status==='Approved'){if(requestData.loanType==='Personal Loan'&&(currentUserData.loanHistory||[]).some(loan=>loan.type==='Personal Loan'&&loan.status==='Active')){alert(`User ${requestData.userName} already has an active Personal Loan. Denying this request.`);status='Denied';}else{var _currentUserData$acco2;const loanAmount=requestData.amount;const newLoanEntry={id:requestId,type:requestData.loanType,amount:loanAmount,repaymentPeriod:requestData.repaymentPeriod,interestRate:requestData.interestRate,collateralLink:requestData.collateralLink||null,downPayment:requestData.downPayment||0,propertyRegion:requestData.propertyRegion||'',dateIssued:new Date().toLocaleDateString('en-US'),status:'Active',monthlyPayment:loanAmount*(requestData.interestRate/12*Math.pow(1+requestData.interestRate/12,requestData.repaymentPeriod))/(Math.pow(1+requestData.interestRate/12,requestData.repaymentPeriod)-1)||0,discordLink:requestData.discordLink// Add discordLink if available\n};await updateDoc(userDocRef,{balance:(currentUserData.balance||0)+loanAmount,'accounts.Personal':(((_currentUserData$acco2=currentUserData.accounts)===null||_currentUserData$acco2===void 0?void 0:_currentUserData$acco2.Personal)||0)+loanAmount,transactions:[...(currentUserData.transactions||[]),{date:new Date().toLocaleDateString('en-US'),description:`Loan Approved: ${requestData.loanType} (ID: ${requestId})`,amount:loanAmount,status:'Complete',discordLink:requestData.discordLink// Add discordLink if available\n}],loanHistory:[...(currentUserData.loanHistory||[]),newLoanEntry]});alert(`${requestData.loanType} loan for ${requestData.userName} approved for ₽${loanAmount.toLocaleString()}.`);}}else{alert(`Loan request for ${requestData.userName} denied.`);}await updateDoc(requestDocRef,{status:status});}catch(error){console.error(`Error ${status.toLowerCase()} loan request:`,error);alert(`Failed to ${status.toLowerCase()} loan request: ${error.message}`);}};const handleSignOut=async()=>{try{await signOut(auth);setUserProfile(null);// Clear user profile on sign out\nalert('Signed out successfully!');}catch(error){console.error(\"Error signing out:\",error);alert(`Failed to sign out: ${error.message}`);}};const renderMainContent=()=>{switch(activeSection){case'dashboard-overview':return/*#__PURE__*/_jsx(AdminDashboardOverview,{accountRequests:accountRequests,creditCardRequests:creditCardRequests,depositRequests:depositRequests,withdrawalRequests:withdrawalRequests,loanRequests:loanRequests});case'account-queues':return/*#__PURE__*/_jsx(AdminAccountQueues,{accountRequests:accountRequests,creditCardRequests:creditCardRequests,depositRequests:depositRequests,withdrawalRequests:withdrawalRequests,loanRequests:loanRequests,handleApproveDenyAccountRequest:handleApproveDenyAccountRequest,handleApproveDenyCreditCardRequest:handleApproveDenyCreditCardRequest,handleApproveDenyDepositRequest:handleApproveDenyDepositRequest,handleApproveDenyWithdrawalRequest:handleApproveDenyWithdrawalRequest,handleApproveDenyLoanRequest:handleApproveDenyLoanRequest});case'credit-loans':return/*#__PURE__*/_jsx(AdminCreditLoans,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId});case'user-management':return/*#__PURE__*/_jsx(AdminUserManagement,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId});case'reports-audits':return/*#__PURE__*/_jsx(AdminReportsAudits,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId});case'government-tools':return/*#__PURE__*/_jsx(AdminGovernmentTools,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId});case'security-tools':return/*#__PURE__*/_jsx(AdminSecurityTools,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId,isSystemLocked:isSystemLocked,setIsSystemLocked:setIsSystemLocked});case'advanced-admin':return/*#__PURE__*/_jsx(AdminAdvancedTools,{db:db,appId:appId,findUserByDiscordOrBankId:findUserByDiscordOrBankId,userProfile:userProfile});case'sign-out':handleSignOut();return null;// Or a loading/signed out message\ndefault:return/*#__PURE__*/_jsx(AdminDashboardOverview,{accountRequests:accountRequests,creditCardRequests:creditCardRequests,depositRequests:depositRequests,withdrawalRequests:withdrawalRequests,loanRequests:loanRequests});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex h-screen bg-gray-900\",style:{backgroundColor:COLORS.background},children:[/*#__PURE__*/_jsx(AdminSidebar,{activeSection:activeSection,setActiveSection:setActiveSection,userProfile:userProfile}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 flex flex-col overflow-hidden\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"flex items-center justify-between p-4 shadow-md\",style:{backgroundColor:COLORS.secondaryBackground,color:COLORS.typography},children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"font-semibold text-lg\",children:[\"\\uD83D\\uDC64 \",(userProfile===null||userProfile===void 0?void 0:userProfile.discordId)||(userProfile===null||userProfile===void 0?void 0:userProfile.bankId)||'Admin']}),/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-gray-400\",children:\"\\uD83D\\uDCCD Headquarters\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-400\",children:[\"\\uD83D\\uDD52 Joined: \",(userProfile===null||userProfile===void 0?void 0:userProfile.dateJoined)||'N/A']}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-400\",children:[\"\\uD83D\\uDD12 KYC-\",(userProfile===null||userProfile===void 0?void 0:userProfile.kycCode)||'ADMIN-SBR-2025']}),isSystemLocked&&/*#__PURE__*/_jsx(\"span\",{className:\"text-sm font-bold text-red-500 ml-4\",children:\"SYSTEM LOCKED!\"})]})}),/*#__PURE__*/_jsx(\"main\",{className:\"flex-1 overflow-x-hidden overflow-y-auto\",children:renderMainContent()})]})]});};export default AdminDashboardLayout;","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","collection","query","where","getDocs","getDoc","deleteDoc","onSnapshot","signOut","COLORS","AdminSidebar","AdminDashboardOverview","AdminAccountQueues","AdminCreditLoans","AdminUserManagement","AdminReportsAudits","AdminGovernmentTools","AdminSecurityTools","AdminAdvancedTools","jsx","_jsx","jsxs","_jsxs","AdminDashboardLayout","_ref","setUserProfile","db","appId","auth","userProfile","activeSection","setActiveSection","accountRequests","setAccountRequests","creditCardRequests","setCreditCardRequests","depositRequests","setDepositRequests","withdrawalRequests","setWithdrawalRequests","loanRequests","setLoanRequests","isSystemLocked","setIsSystemLocked","findUserByDiscordOrBankId","id","usersRef","q","test","discordSnapshot","empty","docs","data","bankIdSnapshot","currentUser","console","log","uid","adminSettingsRef","unsubscribeGlobalLock","docSnap","exists","merge","error","unsubscribeAccountRequests","snapshot","map","unsubscribeCreditCardRequests","unsubscribeDepositRequests","unsubscribeWithdrawalRequests","unsubscribeLoanRequests","handleApproveDenyAccountRequest","requestId","status","requestDocRef","requestSnap","alert","requestData","userDocRef","userId","currentUserSnap","currentUserData","depositAmount","initialDeposit","newBalance","balance","newAccounts","accounts","accountType","newTransactions","transactions","date","Date","toLocaleDateString","description","amount","discordLink","discordMessageLink","updateData","debitCard","number","Array","fill","Math","floor","random","join","expiry","String","getMonth","padStart","getFullYear","slice","cvv","pin","userName","toLowerCase","message","handleApproveDenyCreditCardRequest","approvalMessage","creditLimit","creditScore","toLocaleString","hasCreditCard","handleApproveDenyDepositRequest","_currentUserData$acco","Personal","toFixed","handleApproveDenyWithdrawalRequest","withdrawalAmount","sourceAccount","handleApproveDenyLoanRequest","loanType","loanHistory","some","loan","type","_currentUserData$acco2","loanAmount","newLoanEntry","repaymentPeriod","interestRate","collateralLink","downPayment","propertyRegion","dateIssued","monthlyPayment","pow","handleSignOut","renderMainContent","className","style","backgroundColor","background","children","secondaryBackground","color","typography","discordId","bankId","dateJoined","kycCode"],"sources":["C:/Users/trent/OneDrive/Desktop/SberBank Website/src/components/AdminDashboardLayout.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc, collection, query, where, getDocs, getDoc, deleteDoc, onSnapshot } from 'firebase/firestore';\r\nimport { signOut } from 'firebase/auth'; // Import signOut\r\nimport { COLORS } from '../constants';\r\nimport AdminSidebar from './admin/AdminSidebar';\r\nimport AdminDashboardOverview from './admin/AdminDashboardOverview';\r\nimport AdminAccountQueues from './admin/AdminAccountQueues';\r\nimport AdminCreditLoans from './admin/AdminCreditLoans';\r\nimport AdminUserManagement from './admin/AdminUserManagement';\r\nimport AdminReportsAudits from './admin/AdminReportsAudits';\r\nimport AdminGovernmentTools from './admin/AdminGovernmentTools';\r\nimport AdminSecurityTools from './admin/AdminSecurityTools';\r\nimport AdminAdvancedTools from './admin/AdminAdvancedTools';\r\n\r\nconst AdminDashboardLayout = ({ setUserProfile, db, appId, auth, userProfile }) => {\r\n    const [activeSection, setActiveSection] = useState('dashboard-overview');\r\n    const [accountRequests, setAccountRequests] = useState([]);\r\n    const [creditCardRequests, setCreditCardRequests] = useState([]);\r\n    const [depositRequests, setDepositRequests] = useState([]);\r\n    const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n    const [loanRequests, setLoanRequests] = useState([]);\r\n    const [isSystemLocked, setIsSystemLocked] = useState(false); // Global system lock state\r\n\r\n    // Function to find user by Discord ID or Bank ID\r\n    const findUserByDiscordOrBankId = async (id) => {\r\n        const usersRef = collection(db, `artifacts/${appId}/users`);\r\n        let q;\r\n\r\n        if (/^\\d+$/.test(id)) { // Check if ID is purely numeric (likely Discord ID)\r\n            q = query(usersRef, where(\"discordId\", \"==\", id));\r\n            const discordSnapshot = await getDocs(q);\r\n            if (!discordSnapshot.empty) {\r\n                return { id: discordSnapshot.docs[0].id, data: discordSnapshot.docs[0].data() };\r\n            }\r\n            // If not found by Discord ID, try Bank ID (which can also be numeric)\r\n            q = query(usersRef, where(\"bankId\", \"==\", id));\r\n            const bankIdSnapshot = await getDocs(q);\r\n            if (!bankIdSnapshot.empty) {\r\n                return { id: bankIdSnapshot.docs[0].id, data: bankIdSnapshot.docs[0].data() };\r\n            }\r\n        } else { // Assume it's a Bank ID (alphanumeric)\r\n            q = query(usersRef, where(\"bankId\", \"==\", id));\r\n            const bankIdSnapshot = await getDocs(q);\r\n            if (!bankIdSnapshot.empty) {\r\n                return { id: bankIdSnapshot.docs[0].id, data: bankIdSnapshot.docs[0].data() };\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Fetch requests and global lock status on mount\r\n    useEffect(() => {\r\n        if (!db || !auth.currentUser) {\r\n            console.log(\"AdminDashboardLayout: DB or auth.currentUser not ready for fetching requests.\");\r\n            return;\r\n        }\r\n        console.log(\"AdminDashboardLayout: Current authenticated user UID:\", auth.currentUser.uid);\r\n\r\n        // Listen to global system lock status\r\n        const adminSettingsRef = doc(db, `artifacts/${appId}/public/data/adminSettings`, 'global');\r\n        const unsubscribeGlobalLock = onSnapshot(adminSettingsRef, (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                setIsSystemLocked(docSnap.data().isSystemLocked || false);\r\n            } else {\r\n                // If the document doesn't exist, create it with default false\r\n                updateDoc(adminSettingsRef, { isSystemLocked: false }, { merge: true });\r\n                setIsSystemLocked(false);\r\n            }\r\n        }, (error) => console.error(\"Error listening to global lock status:\", error));\r\n\r\n\r\n        const unsubscribeAccountRequests = onSnapshot(query(collection(db, `artifacts/${appId}/public/data/accountRequests`), where(\"status\", \"==\", \"Pending\")), (snapshot) => {\r\n            setAccountRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        }, (error) => console.error(\"AdminDashboardLayout: Error listening to account requests:\", error));\r\n\r\n        const unsubscribeCreditCardRequests = onSnapshot(query(collection(db, `artifacts/${appId}/public/data/creditCardRequests`), where(\"status\", \"==\", \"Pending\")), (snapshot) => {\r\n            setCreditCardRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        }, (error) => console.error(\"AdminDashboardLayout: Error listening to credit card requests:\", error));\r\n\r\n        const unsubscribeDepositRequests = onSnapshot(query(collection(db, `artifacts/${appId}/public/data/depositRequests`), where(\"status\", \"==\", \"Pending\")), (snapshot) => {\r\n            setDepositRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        }, (error) => console.error(\"AdminDashboardLayout: Error listening to deposit requests:\", error));\r\n\r\n        const unsubscribeWithdrawalRequests = onSnapshot(query(collection(db, `artifacts/${appId}/public/data/withdrawalRequests`), where(\"status\", \"==\", \"Pending\")), (snapshot) => {\r\n            setWithdrawalRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        }, (error) => console.error(\"AdminDashboardLayout: Error listening to withdrawal requests:\", error));\r\n\r\n        const unsubscribeLoanRequests = onSnapshot(query(collection(db, `artifacts/${appId}/public/data/loanRequests`), where(\"status\", \"==\", \"Pending\")), (snapshot) => {\r\n            setLoanRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n        }, (error) => console.error(\"AdminDashboardLayout: Error listening to loan requests:\", error));\r\n\r\n        return () => {\r\n            unsubscribeAccountRequests();\r\n            unsubscribeCreditCardRequests();\r\n            unsubscribeDepositRequests();\r\n            unsubscribeWithdrawalRequests();\r\n            unsubscribeLoanRequests();\r\n            unsubscribeGlobalLock();\r\n        };\r\n\r\n    }, [db, appId, auth.currentUser]);\r\n\r\n    // --- Request Approval/Denial Handlers (Moved from AdminDashboardLayout, now passed as props) ---\r\n    const handleApproveDenyAccountRequest = async (requestId, status) => {\r\n        try {\r\n            const requestDocRef = doc(db, `artifacts/${appId}/public/data/accountRequests`, requestId);\r\n            const requestSnap = await getDoc(requestDocRef);\r\n            if (!requestSnap.exists()) { alert('Account request not found.'); return; }\r\n            const requestData = requestSnap.data();\r\n            const userDocRef = doc(db, `artifacts/${appId}/users`, requestData.userId);\r\n            const currentUserSnap = await getDoc(userDocRef);\r\n\r\n            if (!currentUserSnap.exists()) {\r\n                alert('User for this request not found. Request cannot be processed.');\r\n                await deleteDoc(requestDocRef);\r\n                return;\r\n            }\r\n            const currentUserData = currentUserSnap.data();\r\n\r\n            if (status === 'Approved') {\r\n                const depositAmount = requestData.initialDeposit;\r\n                const newBalance = (currentUserData.balance || 0) + depositAmount;\r\n                const newAccounts = { ...currentUserData.accounts, [requestData.accountType]: (currentUserData.accounts[requestData.accountType] || 0) + depositAmount };\r\n                const newTransactions = [...(currentUserData.transactions || []), {\r\n                    date: new Date().toLocaleDateString('en-US'),\r\n                    description: `${requestData.accountType} Account Opened (Admin Approved)`,\r\n                    amount: depositAmount,\r\n                    status: 'Complete',\r\n                    discordLink: requestData.discordMessageLink\r\n                }];\r\n\r\n                const updateData = {\r\n                    balance: newBalance,\r\n                    accounts: newAccounts,\r\n                    transactions: newTransactions,\r\n                };\r\n\r\n                if (requestData.accountType === 'Personal' && !currentUserData.debitCard) {\r\n                    updateData.debitCard = {\r\n                        number: Array(4).fill(0).map(() => Math.floor(1000 + Math.random() * 9000)).join(' '),\r\n                        expiry: `${String(new Date().getMonth() + 1).padStart(2, '0')}/${String(new Date().getFullYear() + 7).slice(-2)}`,\r\n                        cvv: String(Math.floor(100 + Math.random() * 900)),\r\n                        pin: String(Math.floor(1000 + Math.random() * 9000)),\r\n                    };\r\n                }\r\n                await updateDoc(userDocRef, updateData);\r\n                alert(`${requestData.accountType} account for ${requestData.userName} approved. Balance updated.`);\r\n            } else {\r\n                alert(`${requestData.accountType} account for ${requestData.userName} denied.`);\r\n            }\r\n            await updateDoc(requestDocRef, { status: status });\r\n        } catch (error) {\r\n            console.error(`Error ${status.toLowerCase()} account request:`, error);\r\n            alert(`Failed to ${status.toLowerCase()} account request: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleApproveDenyCreditCardRequest = async (requestId, status) => {\r\n        try {\r\n            const requestDocRef = doc(db, `artifacts/${appId}/public/data/creditCardRequests`, requestId);\r\n            const requestSnap = await getDoc(requestDocRef);\r\n            if (!requestSnap.exists()) { alert('Credit Card request not found.'); return; }\r\n            const requestData = requestSnap.data();\r\n            const userDocRef = doc(db, `artifacts/${appId}/users`, requestData.userId);\r\n            const currentUserSnap = await getDoc(userDocRef);\r\n            if (!currentUserSnap.exists()) {\r\n                alert('User for this request not found. Request cannot be processed.');\r\n                await deleteDoc(requestDocRef);\r\n                return;\r\n            }\r\n            const currentUserData = currentUserSnap.data();\r\n\r\n            let approvalMessage = '';\r\n            let creditLimit = 0;\r\n\r\n            if (status === 'Approved') {\r\n                if (requestData.creditScore >= 750) {\r\n                    creditLimit = 20000;\r\n                    approvalMessage = `Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit (Premium).`;\r\n                } else if (requestData.creditScore >= 600) {\r\n                    creditLimit = 15000;\r\n                    approvalMessage = `Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit.`;\r\n                } else if (requestData.creditScore >= 500) {\r\n                    creditLimit = 5000;\r\n                    approvalMessage = `Credit Card approved for ${requestData.userName} with a ₽${creditLimit.toLocaleString()} limit (Manual Review).`;\r\n                } else {\r\n                    status = 'Denied';\r\n                    approvalMessage = `Credit Card denied for ${requestData.userName} (Score too low: ${requestData.creditScore}).`;\r\n                }\r\n\r\n                if (status === 'Approved') {\r\n                    await updateDoc(userDocRef, {\r\n                        hasCreditCard: true,\r\n                        'accounts.CreditCard': creditLimit,\r\n                        transactions: [...(currentUserData.transactions || []), {\r\n                            date: new Date().toLocaleDateString('en-US'),\r\n                            description: `Credit Card Approved (Limit: ₽${creditLimit.toLocaleString()})`,\r\n                            amount: 0,\r\n                            status: 'Complete',\r\n                            discordLink: requestData.discordLink\r\n                        }]\r\n                    });\r\n                }\r\n            } else {\r\n                approvalMessage = `Credit Card denied for ${requestData.userName}.`;\r\n            }\r\n\r\n            await updateDoc(requestDocRef, { status: status, creditLimit: creditLimit });\r\n            alert(approvalMessage);\r\n        } catch (error) {\r\n            console.error(`Error ${status.toLowerCase()} credit card request:`, error);\r\n            alert(`Failed to ${status.toLowerCase()} credit card request: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleApproveDenyDepositRequest = async (requestId, status) => {\r\n        try {\r\n            const requestDocRef = doc(db, `artifacts/${appId}/public/data/depositRequests`, requestId);\r\n            const requestSnap = await getDoc(requestDocRef);\r\n            if (!requestSnap.exists()) { alert('Deposit request not found.'); return; }\r\n            const requestData = requestSnap.data();\r\n            const userDocRef = doc(db, `artifacts/${appId}/users`, requestData.userId);\r\n            const currentUserSnap = await getDoc(userDocRef);\r\n            if (!currentUserSnap.exists()) {\r\n                alert('User for this request not found. Request cannot be processed.');\r\n                await deleteDoc(requestDocRef);\r\n                return;\r\n            }\r\n            const currentUserData = currentUserSnap.data();\r\n\r\n            if (status === 'Approved') {\r\n                const depositAmount = requestData.amount;\r\n                await updateDoc(userDocRef, {\r\n                    balance: (currentUserData.balance || 0) + depositAmount,\r\n                    'accounts.Personal': (currentUserData.accounts?.Personal || 0) + depositAmount,\r\n                    transactions: [...(currentUserData.transactions || []), {\r\n                        date: new Date().toLocaleDateString('en-US'),\r\n                        description: `Deposit Approved (Proof: ${requestData.discordLink})`,\r\n                        amount: depositAmount,\r\n                        status: 'Complete',\r\n                        discordLink: requestData.discordLink\r\n                    }]\r\n                });\r\n                alert(`Deposit of ${depositAmount.toFixed(2)} RUB for ${requestData.userName} approved.`);\r\n            } else {\r\n                alert(`Deposit request for ${requestData.userName} denied.`);\r\n            }\r\n            await updateDoc(requestDocRef, { status: status });\r\n        } catch (error) {\r\n            console.error(`Error ${status.toLowerCase()} deposit request:`, error);\r\n            alert(`Failed to ${status.toLowerCase()} deposit request: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleApproveDenyWithdrawalRequest = async (requestId, status) => {\r\n        try {\r\n            const requestDocRef = doc(db, `artifacts/${appId}/public/data/withdrawalRequests`, requestId);\r\n            const requestSnap = await getDoc(requestDocRef);\r\n            if (!requestSnap.exists()) { alert('Withdrawal request not found.'); return; }\r\n            const requestData = requestSnap.data();\r\n            const userDocRef = doc(db, `artifacts/${appId}/users`, requestData.userId);\r\n            const currentUserSnap = await getDoc(userDocRef);\r\n            if (!currentUserSnap.exists()) {\r\n                alert('User for this request not found. Request cannot be processed.');\r\n                await deleteDoc(requestDocRef);\r\n                return;\r\n            }\r\n            const currentUserData = currentUserSnap.data();\r\n\r\n            if (status === 'Approved') {\r\n                const withdrawalAmount = requestData.amount;\r\n                const sourceAccount = requestData.sourceAccount;\r\n\r\n                if ((currentUserData.accounts[sourceAccount] || 0) < withdrawalAmount) {\r\n                    alert(`User ${requestData.userName} has insufficient funds in ${sourceAccount} for this withdrawal. Denying.`);\r\n                    status = 'Denied';\r\n                } else {\r\n                    await updateDoc(userDocRef, {\r\n                        [`accounts.${sourceAccount}`]: (currentUserData.accounts[sourceAccount] || 0) - withdrawalAmount,\r\n                        balance: (currentUserData.balance || 0) - withdrawalAmount,\r\n                        transactions: [...(currentUserData.transactions || []), {\r\n                            date: new Date().toLocaleDateString('en-US'),\r\n                            description: `Withdrawal Approved from ${sourceAccount}`,\r\n                            amount: -withdrawalAmount,\r\n                            status: 'Complete',\r\n                            discordLink: requestData.discordLink // Add discordLink if available\r\n                        }]\r\n                    });\r\n                    alert(`Withdrawal of ${withdrawalAmount.toFixed(2)} RUB from ${sourceAccount} for ${requestData.userName} approved.`);\r\n                }\r\n            } else {\r\n                alert(`Withdrawal request for ${requestData.userName} denied.`);\r\n            }\r\n            await updateDoc(requestDocRef, { status: status });\r\n        } catch (error) {\r\n            console.error(`Error ${status.toLowerCase()} withdrawal request:`, error);\r\n            alert(`Failed to ${status.toLowerCase()} withdrawal request: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleApproveDenyLoanRequest = async (requestId, status) => {\r\n        try {\r\n            const requestDocRef = doc(db, `artifacts/${appId}/public/data/loanRequests`, requestId);\r\n            const requestSnap = await getDoc(requestDocRef);\r\n            if (!requestSnap.exists()) { alert('Loan request not found.'); return; }\r\n            const requestData = requestSnap.data();\r\n            const userDocRef = doc(db, `artifacts/${appId}/users`, requestData.userId);\r\n            const currentUserSnap = await getDoc(userDocRef);\r\n            if (!currentUserSnap.exists()) {\r\n                alert('User for this request not found. Request cannot be processed.');\r\n                await deleteDoc(requestDocRef);\r\n                return;\r\n            }\r\n            const currentUserData = currentUserSnap.data();\r\n\r\n            if (status === 'Approved') {\r\n                if (requestData.loanType === 'Personal Loan' && (currentUserData.loanHistory || []).some(loan => loan.type === 'Personal Loan' && loan.status === 'Active')) {\r\n                    alert(`User ${requestData.userName} already has an active Personal Loan. Denying this request.`);\r\n                    status = 'Denied';\r\n                } else {\r\n                    const loanAmount = requestData.amount;\r\n                    const newLoanEntry = {\r\n                        id: requestId,\r\n                        type: requestData.loanType,\r\n                        amount: loanAmount,\r\n                        repaymentPeriod: requestData.repaymentPeriod,\r\n                        interestRate: requestData.interestRate,\r\n                        collateralLink: requestData.collateralLink || null,\r\n                        downPayment: requestData.downPayment || 0,\r\n                        propertyRegion: requestData.propertyRegion || '',\r\n                        dateIssued: new Date().toLocaleDateString('en-US'),\r\n                        status: 'Active',\r\n                        monthlyPayment: (loanAmount * (requestData.interestRate / 12 * Math.pow(1 + requestData.interestRate / 12, requestData.repaymentPeriod)) / (Math.pow(1 + requestData.interestRate / 12, requestData.repaymentPeriod) - 1)) || 0,\r\n                        discordLink: requestData.discordLink // Add discordLink if available\r\n                    };\r\n\r\n                    await updateDoc(userDocRef, {\r\n                        balance: (currentUserData.balance || 0) + loanAmount,\r\n                        'accounts.Personal': (currentUserData.accounts?.Personal || 0) + loanAmount,\r\n                        transactions: [...(currentUserData.transactions || []), {\r\n                            date: new Date().toLocaleDateString('en-US'),\r\n                            description: `Loan Approved: ${requestData.loanType} (ID: ${requestId})`,\r\n                            amount: loanAmount,\r\n                            status: 'Complete',\r\n                            discordLink: requestData.discordLink // Add discordLink if available\r\n                        }],\r\n                        loanHistory: [...(currentUserData.loanHistory || []), newLoanEntry]\r\n                    });\r\n                    alert(`${requestData.loanType} loan for ${requestData.userName} approved for ₽${loanAmount.toLocaleString()}.`);\r\n                }\r\n            } else {\r\n                alert(`Loan request for ${requestData.userName} denied.`);\r\n            }\r\n            await updateDoc(requestDocRef, { status: status });\r\n        } catch (error) {\r\n            console.error(`Error ${status.toLowerCase()} loan request:`, error);\r\n            alert(`Failed to ${status.toLowerCase()} loan request: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleSignOut = async () => {\r\n        try {\r\n            await signOut(auth);\r\n            setUserProfile(null); // Clear user profile on sign out\r\n            alert('Signed out successfully!');\r\n        } catch (error) {\r\n            console.error(\"Error signing out:\", error);\r\n            alert(`Failed to sign out: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const renderMainContent = () => {\r\n        switch (activeSection) {\r\n            case 'dashboard-overview':\r\n                return <AdminDashboardOverview\r\n                    accountRequests={accountRequests}\r\n                    creditCardRequests={creditCardRequests}\r\n                    depositRequests={depositRequests}\r\n                    withdrawalRequests={withdrawalRequests}\r\n                    loanRequests={loanRequests}\r\n                />;\r\n            case 'account-queues':\r\n                return <AdminAccountQueues\r\n                    accountRequests={accountRequests}\r\n                    creditCardRequests={creditCardRequests}\r\n                    depositRequests={depositRequests}\r\n                    withdrawalRequests={withdrawalRequests}\r\n                    loanRequests={loanRequests}\r\n                    handleApproveDenyAccountRequest={handleApproveDenyAccountRequest}\r\n                    handleApproveDenyCreditCardRequest={handleApproveDenyCreditCardRequest}\r\n                    handleApproveDenyDepositRequest={handleApproveDenyDepositRequest}\r\n                    handleApproveDenyWithdrawalRequest={handleApproveDenyWithdrawalRequest}\r\n                    handleApproveDenyLoanRequest={handleApproveDenyLoanRequest}\r\n                />;\r\n            case 'credit-loans':\r\n                return <AdminCreditLoans\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                />;\r\n            case 'user-management':\r\n                return <AdminUserManagement\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                />;\r\n            case 'reports-audits':\r\n                return <AdminReportsAudits\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                />;\r\n            case 'government-tools':\r\n                return <AdminGovernmentTools\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                />;\r\n            case 'security-tools':\r\n                return <AdminSecurityTools\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                    isSystemLocked={isSystemLocked}\r\n                    setIsSystemLocked={setIsSystemLocked}\r\n                />;\r\n            case 'advanced-admin':\r\n                return <AdminAdvancedTools\r\n                    db={db}\r\n                    appId={appId}\r\n                    findUserByDiscordOrBankId={findUserByDiscordOrBankId}\r\n                    userProfile={userProfile}\r\n                />;\r\n            case 'sign-out':\r\n                handleSignOut();\r\n                return null; // Or a loading/signed out message\r\n            default:\r\n                return <AdminDashboardOverview\r\n                    accountRequests={accountRequests}\r\n                    creditCardRequests={creditCardRequests}\r\n                    depositRequests={depositRequests}\r\n                    withdrawalRequests={withdrawalRequests}\r\n                    loanRequests={loanRequests}\r\n                />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex h-screen bg-gray-900\" style={{ backgroundColor: COLORS.background }}>\r\n            <AdminSidebar activeSection={activeSection} setActiveSection={setActiveSection} userProfile={userProfile} />\r\n            <div className=\"flex-1 flex flex-col overflow-hidden\">\r\n                {/* Top Bar */}\r\n                <header className=\"flex items-center justify-between p-4 shadow-md\" style={{ backgroundColor: COLORS.secondaryBackground, color: COLORS.typography }}>\r\n                    <div className=\"flex items-center space-x-4\">\r\n                        <span className=\"font-semibold text-lg\">👤 {userProfile?.discordId || userProfile?.bankId || 'Admin'}</span>\r\n                        <span className=\"text-sm text-gray-400\">📍 Headquarters</span>\r\n                        <span className=\"text-sm text-gray-400\">🕒 Joined: {userProfile?.dateJoined || 'N/A'}</span>\r\n                        <span className=\"text-sm text-gray-400\">🔒 KYC-{userProfile?.kycCode || 'ADMIN-SBR-2025'}</span>\r\n                        {isSystemLocked && (\r\n                            <span className=\"text-sm font-bold text-red-500 ml-4\">SYSTEM LOCKED!</span>\r\n                        )}\r\n                    </div>\r\n                </header>\r\n\r\n                {/* Main Content Area */}\r\n                <main className=\"flex-1 overflow-x-hidden overflow-y-auto\">\r\n                    {renderMainContent()}\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminDashboardLayout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}